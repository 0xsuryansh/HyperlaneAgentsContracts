/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import * as Contracts from '.';
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from '@nomiclabs/hardhat-ethers/types';
import { ethers } from 'ethers';

declare module 'hardhat/types/runtime' {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: 'AbacusConnectionClient',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AbacusConnectionClient__factory>;
    getContractFactory(
      name: 'Router',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Router__factory>;
    getContractFactory(
      name: 'IAbacusConnectionManager',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IAbacusConnectionManager__factory>;
    getContractFactory(
      name: 'IInterchainGasPaymaster',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IInterchainGasPaymaster__factory>;
    getContractFactory(
      name: 'IMailbox',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IMailbox__factory>;
    getContractFactory(
      name: 'IMessageRecipient',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IMessageRecipient__factory>;
    getContractFactory(
      name: 'IOutbox',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IOutbox__factory>;
    getContractFactory(
      name: 'OwnableUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: 'Initializable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: 'ContextUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: 'InterchainAccountRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.InterchainAccountRouter__factory>;
    getContractFactory(
      name: 'OwnableMulticall',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.OwnableMulticall__factory>;
    getContractFactory(
      name: 'TestRecipient',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TestRecipient__factory>;

    getContractAt(
      name: 'AbacusConnectionClient',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AbacusConnectionClient>;
    getContractAt(
      name: 'Router',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.Router>;
    getContractAt(
      name: 'IAbacusConnectionManager',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IAbacusConnectionManager>;
    getContractAt(
      name: 'IInterchainGasPaymaster',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IInterchainGasPaymaster>;
    getContractAt(
      name: 'IMailbox',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IMailbox>;
    getContractAt(
      name: 'IMessageRecipient',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IMessageRecipient>;
    getContractAt(
      name: 'IOutbox',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IOutbox>;
    getContractAt(
      name: 'OwnableUpgradeable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: 'Initializable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: 'ContextUpgradeable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: 'InterchainAccountRouter',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.InterchainAccountRouter>;
    getContractAt(
      name: 'OwnableMulticall',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.OwnableMulticall>;
    getContractAt(
      name: 'TestRecipient',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.TestRecipient>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer,
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer,
    ): Promise<ethers.Contract>;
  }
}
