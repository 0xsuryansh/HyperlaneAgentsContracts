/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { Provider } from '@ethersproject/providers';
import { Contract, Signer, utils } from 'ethers';

import type {
  IAbacusConnectionManager,
  IAbacusConnectionManagerInterface,
} from '../../../../@abacus-network/core/interfaces/IAbacusConnectionManager';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_inbox',
        type: 'address',
      },
    ],
    name: 'isInbox',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'localDomain',
    outputs: [
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'outbox',
    outputs: [
      {
        internalType: 'contract IOutbox',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

export class IAbacusConnectionManager__factory {
  static readonly abi = _abi;
  static createInterface(): IAbacusConnectionManagerInterface {
    return new utils.Interface(_abi) as IAbacusConnectionManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): IAbacusConnectionManager {
    return new Contract(
      address,
      _abi,
      signerOrProvider,
    ) as IAbacusConnectionManager;
  }
}
