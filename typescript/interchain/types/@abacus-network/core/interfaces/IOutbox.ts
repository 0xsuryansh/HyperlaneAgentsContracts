/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../../common';

export interface IOutboxInterface extends utils.Interface {
  functions: {
    'cacheCheckpoint()': FunctionFragment;
    'cachedCheckpoints(bytes32)': FunctionFragment;
    'count()': FunctionFragment;
    'dispatch(uint32,bytes32,bytes)': FunctionFragment;
    'fail()': FunctionFragment;
    'latestCachedCheckpoint()': FunctionFragment;
    'latestCheckpoint()': FunctionFragment;
    'localDomain()': FunctionFragment;
    'validatorManager()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'cacheCheckpoint'
      | 'cachedCheckpoints'
      | 'count'
      | 'dispatch'
      | 'fail'
      | 'latestCachedCheckpoint'
      | 'latestCheckpoint'
      | 'localDomain'
      | 'validatorManager',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'cacheCheckpoint',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'cachedCheckpoints',
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'count', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'dispatch',
    values: [BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'fail', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'latestCachedCheckpoint',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'latestCheckpoint',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'localDomain',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'validatorManager',
    values?: undefined,
  ): string;

  decodeFunctionResult(
    functionFragment: 'cacheCheckpoint',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'cachedCheckpoints',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'count', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dispatch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fail', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'latestCachedCheckpoint',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'latestCheckpoint',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'localDomain',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'validatorManager',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface IOutbox extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOutboxInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cacheCheckpoint(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    cachedCheckpoints(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    count(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    dispatch(
      _destinationDomain: BigNumberish,
      _recipientAddress: BytesLike,
      _messageBody: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    fail(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    latestCachedCheckpoint(
      overrides?: CallOverrides,
    ): Promise<[string, BigNumber] & { root: string; index: BigNumber }>;

    latestCheckpoint(overrides?: CallOverrides): Promise<[string, BigNumber]>;

    localDomain(overrides?: CallOverrides): Promise<[number]>;

    validatorManager(overrides?: CallOverrides): Promise<[string]>;
  };

  cacheCheckpoint(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  cachedCheckpoints(
    arg0: BytesLike,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  count(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  dispatch(
    _destinationDomain: BigNumberish,
    _recipientAddress: BytesLike,
    _messageBody: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  fail(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  latestCachedCheckpoint(
    overrides?: CallOverrides,
  ): Promise<[string, BigNumber] & { root: string; index: BigNumber }>;

  latestCheckpoint(overrides?: CallOverrides): Promise<[string, BigNumber]>;

  localDomain(overrides?: CallOverrides): Promise<number>;

  validatorManager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    cacheCheckpoint(overrides?: CallOverrides): Promise<void>;

    cachedCheckpoints(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    dispatch(
      _destinationDomain: BigNumberish,
      _recipientAddress: BytesLike,
      _messageBody: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    fail(overrides?: CallOverrides): Promise<void>;

    latestCachedCheckpoint(
      overrides?: CallOverrides,
    ): Promise<[string, BigNumber] & { root: string; index: BigNumber }>;

    latestCheckpoint(overrides?: CallOverrides): Promise<[string, BigNumber]>;

    localDomain(overrides?: CallOverrides): Promise<number>;

    validatorManager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    cacheCheckpoint(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    cachedCheckpoints(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    count(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    dispatch(
      _destinationDomain: BigNumberish,
      _recipientAddress: BytesLike,
      _messageBody: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    fail(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    latestCachedCheckpoint(overrides?: CallOverrides): Promise<BigNumber>;

    latestCheckpoint(overrides?: CallOverrides): Promise<BigNumber>;

    localDomain(overrides?: CallOverrides): Promise<BigNumber>;

    validatorManager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cacheCheckpoint(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    cachedCheckpoints(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    count(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    dispatch(
      _destinationDomain: BigNumberish,
      _recipientAddress: BytesLike,
      _messageBody: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    fail(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    latestCachedCheckpoint(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    latestCheckpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    localDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validatorManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
