/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../../common';

export interface IAbacusConnectionManagerInterface extends utils.Interface {
  functions: {
    'isInbox(address)': FunctionFragment;
    'localDomain()': FunctionFragment;
    'outbox()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: 'isInbox' | 'localDomain' | 'outbox',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'isInbox', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'localDomain',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'outbox', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'isInbox', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'localDomain',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'outbox', data: BytesLike): Result;

  events: {};
}

export interface IAbacusConnectionManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAbacusConnectionManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isInbox(_inbox: string, overrides?: CallOverrides): Promise<[boolean]>;

    localDomain(overrides?: CallOverrides): Promise<[number]>;

    outbox(overrides?: CallOverrides): Promise<[string]>;
  };

  isInbox(_inbox: string, overrides?: CallOverrides): Promise<boolean>;

  localDomain(overrides?: CallOverrides): Promise<number>;

  outbox(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    isInbox(_inbox: string, overrides?: CallOverrides): Promise<boolean>;

    localDomain(overrides?: CallOverrides): Promise<number>;

    outbox(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    isInbox(_inbox: string, overrides?: CallOverrides): Promise<BigNumber>;

    localDomain(overrides?: CallOverrides): Promise<BigNumber>;

    outbox(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    isInbox(
      _inbox: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    localDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    outbox(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
