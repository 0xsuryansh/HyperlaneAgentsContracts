/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../../common';

export interface IInterchainGasPaymasterInterface extends utils.Interface {
  functions: {
    'payGasFor(address,uint256,uint32)': FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: 'payGasFor'): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'payGasFor',
    values: [string, BigNumberish, BigNumberish],
  ): string;

  decodeFunctionResult(functionFragment: 'payGasFor', data: BytesLike): Result;

  events: {};
}

export interface IInterchainGasPaymaster extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IInterchainGasPaymasterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    payGasFor(
      _outbox: string,
      _leafIndex: BigNumberish,
      _destinationDomain: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  payGasFor(
    _outbox: string,
    _leafIndex: BigNumberish,
    _destinationDomain: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    payGasFor(
      _outbox: string,
      _leafIndex: BigNumberish,
      _destinationDomain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    payGasFor(
      _outbox: string,
      _leafIndex: BigNumberish,
      _destinationDomain: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    payGasFor(
      _outbox: string,
      _leafIndex: BigNumberish,
      _destinationDomain: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
