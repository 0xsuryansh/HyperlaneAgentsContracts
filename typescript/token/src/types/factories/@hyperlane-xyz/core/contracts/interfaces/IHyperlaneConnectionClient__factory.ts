/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { Provider } from '@ethersproject/providers';
import { Contract, Signer, utils } from 'ethers';

import type {
  IHyperlaneConnectionClient,
  IHyperlaneConnectionClientInterface,
} from '../../../../../@hyperlane-xyz/core/contracts/interfaces/IHyperlaneConnectionClient';

const _abi = [
  {
    inputs: [],
    name: 'interchainGasPaymaster',
    outputs: [
      {
        internalType: 'contract IInterchainGasPaymaster',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'interchainSecurityModule',
    outputs: [
      {
        internalType: 'contract IInterchainSecurityModule',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'mailbox',
    outputs: [
      {
        internalType: 'contract IMailbox',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'setInterchainGasPaymaster',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'setInterchainSecurityModule',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'setMailbox',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

export class IHyperlaneConnectionClient__factory {
  static readonly abi = _abi;
  static createInterface(): IHyperlaneConnectionClientInterface {
    return new utils.Interface(_abi) as IHyperlaneConnectionClientInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): IHyperlaneConnectionClient {
    return new Contract(
      address,
      _abi,
      signerOrProvider,
    ) as IHyperlaneConnectionClient;
  }
}
