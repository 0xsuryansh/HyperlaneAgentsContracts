diff --git a/typescript/infra/src/core/deploy.ts b/typescript/infra/src/core/deploy.ts
index 50bc0457..b7763f5e 100644
--- a/typescript/infra/src/core/deploy.ts
+++ b/typescript/infra/src/core/deploy.ts
@@ -1,38 +1,38 @@
-import path from 'path';
-import { ethers } from 'ethers';
-import { types } from '@abacus-network/utils';
-import {
-  AbacusCore,
-  ChainName,
-  CoreContractAddresses,
-  ProxiedAddress,
-} from '@abacus-network/sdk';
-import { AbacusAppDeployer, ProxiedContract } from '@abacus-network/deploy';
 import {
-  UpgradeBeaconController,
-  XAppConnectionManager,
   InboxValidatorManager,
   InboxValidatorManager__factory,
+  Inbox__factory,
+  InterchainGasPaymaster__factory,
   OutboxValidatorManager,
   OutboxValidatorManager__factory,
-  Inbox,
+  Outbox__factory,
+  UpgradeBeaconController,
   UpgradeBeaconController__factory,
+  XAppConnectionManager,
   XAppConnectionManager__factory,
-  Outbox__factory,
-  Inbox__factory,
-  InterchainGasPaymaster__factory,
 } from '@abacus-network/core';
-import { DeployEnvironment, RustConfig } from '../config';
-import { CoreConfig, ValidatorManagerConfig } from './types';
+import { AbacusAppDeployer, ProxiedContract } from '@abacus-network/deploy';
+import {
+  AbacusCore,
+  ChainName,
+  CoreContractAddresses,
+  Mailbox,
+} from '@abacus-network/sdk';
+import { RemoteChainSubsetMap, Remotes } from '@abacus-network/sdk/dist/types';
+import { types } from '@abacus-network/utils';
+import { ethers } from 'ethers';
+import path from 'path';
+import { RustConfig } from '../config';
+import { CoreConfig } from './types';
 
 export class AbacusCoreDeployer extends AbacusAppDeployer<
-  CoreContractAddresses,
-  CoreConfig
+  CoreContractAddresses<ChainName, any>,
+  CoreConfig<ChainName>
 > {
-  async deployContracts(
-    domain: types.Domain,
-    config: CoreConfig,
-  ): Promise<CoreContractAddresses> {
+  async deployContracts<Networks extends ChainName, Local extends Networks>(
+    domain: Local,
+    config: CoreConfig<Networks>,
+  ): Promise<CoreContractAddresses<Networks, Local>> {
     const overrides = this.getOverrides(domain);
     const signer = this.mustGetSigner(domain);
     const upgradeBeaconController: UpgradeBeaconController =
@@ -40,20 +40,20 @@ export class AbacusCoreDeployer extends AbacusAppDeployer<
         domain,
         'UpgradeBeaconController',
         new UpgradeBeaconController__factory(signer),
+        [],
       );
 
-    const outboxValidatorManagerConfig = this.validatorManagerConfig(
-      config,
-      domain,
-    );
+    const outboxValidatorManagerConfig = config.validatorManagers[domain];
     const outboxValidatorManager: OutboxValidatorManager =
       await this.deployContract(
         domain,
         'OutboxValidatorManager',
         new OutboxValidatorManager__factory(signer),
-        domain,
-        outboxValidatorManagerConfig.validators,
-        outboxValidatorManagerConfig.threshold,
+        [
+          domain,
+          outboxValidatorManagerConfig.validators,
+          outboxValidatorManagerConfig.threshold,
+        ],
       );
 
     const outbox = await this.deployProxiedContract(
@@ -69,6 +69,7 @@ export class AbacusCoreDeployer extends AbacusAppDeployer<
       domain,
       'InterchainGasPaymaster',
       new InterchainGasPaymaster__factory(signer),
+      [],
     );
 
     const xAppConnectionManager: XAppConnectionManager =
@@ -76,6 +77,7 @@ export class AbacusCoreDeployer extends AbacusAppDeployer<
         domain,
         'XAppConnectionManager',
         new XAppConnectionManager__factory(signer),
+        [],
       );
     await xAppConnectionManager.setOutbox(outbox.address, overrides);
     await xAppConnectionManager.setInterchainGasPaymaster(
@@ -83,79 +85,83 @@ export class AbacusCoreDeployer extends AbacusAppDeployer<
       overrides,
     );
 
-    const inboxValidatorManagers: Record<types.Domain, InboxValidatorManager> =
-      {};
-    const inboxValidatorManagerAddresses: Partial<
-      Record<ChainName, types.Address>
-    > = {};
-
-    const inboxes: Record<types.Domain, ProxiedContract<Inbox>> = {};
-    const inboxAddresses: Partial<Record<ChainName, ProxiedAddress>> = {};
-    const remotes = this.remoteDomainNumbers(domain);
-    for (let i = 0; i < remotes.length; i++) {
-      const remote = remotes[i];
-      const remoteName = this.mustResolveDomainName(remote);
+    const remotes = Object.keys(config.validatorManagers).filter(
+      (k) => k !== domain,
+    ) as Remotes<Networks, Local>[];
 
-      const validatorManagerConfig = this.validatorManagerConfig(
-        config,
-        remote,
-      );
-      const inboxValidatorManager: InboxValidatorManager =
-        await this.deployContract(
-          domain,
-          'InboxValidatorManager',
-          new InboxValidatorManager__factory(signer),
+    const deployValidatorManager = async (
+      remote: Remotes<Networks, Local>,
+    ): Promise<InboxValidatorManager> => {
+      const validatorManagerConfig = config.validatorManagers[remote];
+      return this.deployContract(
+        domain,
+        'InboxValidatorManager',
+        new InboxValidatorManager__factory(signer),
+        [
           remote,
           validatorManagerConfig.validators,
           validatorManagerConfig.threshold,
-        );
-      inboxValidatorManagers[remote] = inboxValidatorManager;
-      inboxValidatorManagerAddresses[remoteName] =
-        inboxValidatorManager.address;
+        ],
+      );
+    };
 
-      const initArgs = [
-        remote,
-        inboxValidatorManager.address,
+    const getMailbox = (
+      validatorManager: ethers.Contract,
+      box: ProxiedContract<ethers.Contract>,
+    ): Mailbox => ({
+      ...box.addresses,
+      validatorManager: validatorManager.address,
+    });
+
+    const [firstRemote, ...trailingRemotes] = remotes;
+    const firstValidatorManager = await deployValidatorManager(firstRemote);
+    const firstInbox = await this.deployProxiedContract(
+      domain,
+      'Inbox',
+      new Inbox__factory(signer),
+      upgradeBeaconController.address,
+      [domain],
+      [
+        firstRemote,
+        firstValidatorManager.address,
         ethers.constants.HashZero,
         0,
-      ];
-      if (i === 0) {
-        inboxes[remote] = await this.deployProxiedContract(
-          domain,
-          'Inbox',
-          new Inbox__factory(signer),
-          upgradeBeaconController.address,
-          [domain],
-          initArgs,
-        );
-      } else {
-        inboxes[remote] = await this.duplicateProxiedContract(
+      ],
+    );
+
+    type RemoteMailboxEntry = [Remotes<Networks, Local>, Mailbox];
+
+    const firstRemoteMailbox: RemoteMailboxEntry = [
+      firstRemote,
+      getMailbox(firstValidatorManager, firstInbox),
+    ];
+
+    const trailingRemoteMailboxes = await Promise.all(
+      trailingRemotes.map(async (remote): Promise<RemoteMailboxEntry> => {
+        const validatorManager = await deployValidatorManager(remote);
+        const inbox = await this.duplicateProxiedContract(
           domain,
           'Inbox',
-          inboxes[remotes[0]],
-          initArgs,
+          firstInbox,
+          [remote, validatorManager.address, ethers.constants.HashZero, 0],
         );
-      }
-      inboxAddresses[this.mustResolveDomainName(remote)] =
-        inboxes[remote].addresses;
 
-      await xAppConnectionManager.enrollInbox(
-        remote,
-        inboxes[remote].address,
-        overrides,
-      );
-    }
+        return [remote, getMailbox(validatorManager, inbox)];
+      }),
+    );
+
+    const remoteMailboxes = [firstRemoteMailbox, ...trailingRemoteMailboxes];
 
-    const addresses = {
+    const inboxes: RemoteChainSubsetMap<Networks, Local, Mailbox> =
+      Object.fromEntries();
+
+    return {
       upgradeBeaconController: upgradeBeaconController.address,
       xAppConnectionManager: xAppConnectionManager.address,
       interchainGasPaymaster: interchainGasPaymaster.address,
-      outboxValidatorManager: outboxValidatorManager.address,
-      inboxValidatorManagers: inboxValidatorManagerAddresses,
-      outbox: outbox.addresses,
-      inboxes: inboxAddresses,
+      outbox: getMailbox(outboxValidatorManager, outbox),
+      inboxes,
     };
-    return addresses;
   }
 
   writeRustConfigs(environment: DeployEnvironment, directory: string) {
@@ -242,16 +248,4 @@ export class AbacusCoreDeployer extends AbacusAppDeployer<
     const tx = await contracts.outbox.transferOwnership(owner, overrides);
     return tx.wait(core.getConfirmations(domain));
   }
-
-  validatorManagerConfig(
-    config: CoreConfig,
-    domain: types.Domain,
-  ): ValidatorManagerConfig {
-    const domainName = this.mustResolveDomainName(domain);
-    const validatorManagerConfig = config.validatorManagers[domainName];
-    if (!validatorManagerConfig) {
-      throw new Error(`No validator manager config for ${domainName}`);
-    }
-    return validatorManagerConfig;
-  }
 }
