/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockCore, MockCoreInterface } from "../MockCore";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "leafIndex",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint64",
        name: "destinationAndNonce",
        type: "uint64",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "leaf",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "Dispatch",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint32",
        name: "_destination",
        type: "uint32",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "_recipient",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "_body",
        type: "bytes",
      },
    ],
    name: "Enqueue",
    type: "event",
  },
  {
    inputs: [],
    name: "MAX_MESSAGE_BODY_BYTES",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "count",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_destination",
        type: "uint32",
      },
      {
        internalType: "bytes32",
        name: "_recipient",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "_body",
        type: "bytes",
      },
    ],
    name: "dispatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "home",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isReplica",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "localDomain",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_item",
        type: "bytes32",
      },
    ],
    name: "queueContains",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "queueEnd",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "queueLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "root",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tree",
    outputs: [
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611265806100206000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c8063ab91c7b011610081578063f6d161021161005b578063f6d161021461018c578063fa31de01146101c9578063fd54b228146101de57600080fd5b8063ab91c7b014610156578063b95a20011461015e578063ebf0c7171461018457600080fd5b8063522ae002116100b2578063522ae002146101275780638d3638f4146101305780639fa92f9d1461014857600080fd5b806306661abd146100d95780632bef2892146100f05780635190bc5314610113575b600080fd5b6020545b6040519081526020015b60405180910390f35b6101036100fe366004610cfd565b6101e8565b60405190151581526020016100e7565b610103610121366004610d16565b50600190565b6100dd61080081565b60055b60405163ffffffff90911681526020016100e7565b6040513081526020016100e7565b6100dd6101fb565b61013361016c366004610d6c565b60866020526000908152604090205463ffffffff1681565b6100dd61020c565b60535470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff166000908152605460205260409020546100dd565b6101dc6101d7366004610d87565b610218565b005b6020546100dd9081565b60006101f560538361042f565b92915050565b600061020760536104b3565b905090565b600061020760006104f3565b610800811115610289576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f21746f6f2062696700000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b63ffffffff8481166000908152608660205260408120549091169061030260053373ffffffffffffffffffffffffffffffffffffffff1660001b84898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061050692505050565b8051602082012090915061031760008261053e565b61032a61032261020c565b605390610683565b508067ffffffff00000000602089901b1663ffffffff85161767ffffffffffffffff16600161035860205490565b6103629190610e3d565b7f1a2a870182b13cdb4a0ec2e16f96df5a0e20b1327d43564f7f0e62992a55bd6c856040516103919190610e84565b60405180910390a4858763ffffffff167f75792710cca0c980daac207dc69865f88b53833bd172dcac111b2b42758202d687876040516103d2929190610ed5565b60405180910390a36103e5836001610f22565b63ffffffff978816600090815260866020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000169190981617909655505050505050565b81546000906fffffffffffffffffffffffffffffffff165b835470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1681116104a95760008181526001850160205260409020548314156104975760019150506101f5565b806104a181610f4a565b915050610447565b5060009392505050565b80546000906fffffffffffffffffffffffffffffffff7001000000000000000000000000000000008204811691166104eb8282610719565b949350505050565b60006101f58261050161074a565b610c0b565b606086868686868660405160200161052396959493929190610f83565b60405160208183030381529060405290509695505050505050565b600161054c60206002611116565b6105569190610e3d565b8260200154106105c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6d65726b6c6520747265652066756c6c000000000000000000000000000000006044820152606401610280565b60018260200160008282546105d79190611122565b9091555050602082015460005b6020811015610675578160011660011415610614578284826020811061060c5761060c61113a565b015550505050565b8381602081106106265761062661113a565b015460408051602081019290925281018490526060016040516020818303038152906040528051906020012092506002826106619190611169565b91508061066d81610f4a565b9150506105e4565b5061067e6111a4565b505050565b81546000906106b99070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1660016111d3565b83546fffffffffffffffffffffffffffffffff808316700100000000000000000000000000000000029116178455905081156101f5576fffffffffffffffffffffffffffffffff8116600090815260019390930160205260409092205590565b6000816107278460016111d3565b61073191906111fe565b6fffffffffffffffffffffffffffffffff169392505050565b610752610cde565b600081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb560208201527fb4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d3060408201527f21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba8560608201527fe58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a1934460808201527f0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d60a08201527f887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a196860c08201527fffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f8360e08201527f9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af6101008201527fcefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e06101208201527ff9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a56101408201527ff8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf8926101608201527f3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c6101808201527fc1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb6101a08201527f5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc6101c08201527fda7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d26101e08201527f2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f6102008201527fe1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a6102208201527f5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a06102408201527fb46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa06102608201527fc65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e26102808201527ff4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd96102a08201527f5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e3776102c08201527f4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee6526102e08201527fcdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef6103008201527f0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d6103208201527fb8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d06103408201527f838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e6103608201527f662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e6103808201527f388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea3226103a08201527f93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d7356103c08201527f8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a96103e082015290565b6020820154600090815b6020811015610cd657600182821c166000868360208110610c3857610c3861113a565b015490508160011415610c76576040805160208101839052908101869052606001604051602081830303815290604052805190602001209450610cc1565b84868460208110610c8957610c8961113a565b6020020151604051602001610ca8929190918252602082015260400190565b6040516020818303038152906040528051906020012094505b50508080610cce90610f4a565b915050610c15565b505092915050565b6040518061040001604052806020906020820280368337509192915050565b600060208284031215610d0f57600080fd5b5035919050565b600060208284031215610d2857600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610d4c57600080fd5b9392505050565b803563ffffffff81168114610d6757600080fd5b919050565b600060208284031215610d7e57600080fd5b610d4c82610d53565b60008060008060608587031215610d9d57600080fd5b610da685610d53565b935060208501359250604085013567ffffffffffffffff80821115610dca57600080fd5b818701915087601f830112610dde57600080fd5b813581811115610ded57600080fd5b886020828501011115610dff57600080fd5b95989497505060200194505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015610e4f57610e4f610e0e565b500390565b60005b83811015610e6f578181015183820152602001610e57565b83811115610e7e576000848401525b50505050565b6020815260008251806020840152610ea3816040850160208701610e54565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b600063ffffffff808316818516808303821115610f4157610f41610e0e565b01949350505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f7c57610f7c610e0e565b5060010190565b60007fffffffff00000000000000000000000000000000000000000000000000000000808960e01b168352876004840152808760e01b166024840152808660e01b1660288401525083602c8301528251610fe481604c850160208701610e54565b91909101604c01979650505050505050565b600181815b8085111561104f57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561103557611035610e0e565b8085161561104257918102915b93841c9390800290610ffb565b509250929050565b600082611066575060016101f5565b81611073575060006101f5565b81600181146110895760028114611093576110af565b60019150506101f5565b60ff8411156110a4576110a4610e0e565b50506001821b6101f5565b5060208310610133831016604e8410600b84101617156110d2575081810a6101f5565b6110dc8383610ff6565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561110e5761110e610e0e565b029392505050565b6000610d4c8383611057565b6000821982111561113557611135610e0e565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008261119f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b60006fffffffffffffffffffffffffffffffff808316818516808303821115610f4157610f41610e0e565b60006fffffffffffffffffffffffffffffffff8381169083168181101561122757611227610e0e565b03939250505056fea26469706673582212206ce62ac3c0a4e5b8ca8aa85785897349665209ba17cb3d54fa7d0f2eb61e5fc964736f6c63430008090033";

export class MockCore__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockCore> {
    return super.deploy(overrides || {}) as Promise<MockCore>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockCore {
    return super.attach(address) as MockCore;
  }
  connect(signer: Signer): MockCore__factory {
    return super.connect(signer) as MockCore__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockCoreInterface {
    return new utils.Interface(_abi) as MockCoreInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockCore {
    return new Contract(address, _abi, signerOrProvider) as MockCore;
  }
}
