/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestQueue, TestQueueInterface } from "../TestQueue";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_item",
        type: "bytes32",
      },
    ],
    name: "contains",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dequeue",
    outputs: [
      {
        internalType: "bytes32",
        name: "_item",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_number",
        type: "uint256",
      },
    ],
    name: "dequeueMany",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "_items",
        type: "bytes32[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "drain",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_item",
        type: "bytes32",
      },
    ],
    name: "enqueue",
    outputs: [
      {
        internalType: "uint256",
        name: "_last",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "_items",
        type: "bytes32[]",
      },
    ],
    name: "enqueueMany",
    outputs: [
      {
        internalType: "uint256",
        name: "_last",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initializeAgain",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lastItem",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "length",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "peek",
    outputs: [
      {
        internalType: "bytes32",
        name: "_item",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_item",
        type: "bytes32",
      },
    ],
    name: "queueContains",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "queueEnd",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "queueLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b93806100206000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80638f2cbe701161008c578063a9541aa211610066578063a9541aa2146101ac578063ab91c7b01461010c578063b4de3e23146101b4578063f6d161021461012257600080fd5b80638f2cbe7014610187578063957908d11461019a5780639890220b146101a257600080fd5b80632bef2892116100bd5780632bef2892146100e457806359e02dd71461015f5780635b8b49591461016757600080fd5b80631d1a696d146100e45780631f7b6d321461010c578063210ce6b914610122575b600080fd5b6100f76100f2366004610918565b6101c7565b60405190151581526020015b60405180910390f35b6101146101da565b604051908152602001610103565b60015470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16600090815260026020526040902054610114565b6101146101eb565b61017a610175366004610918565b6101f7565b6040516101039190610931565b610114610195366004610975565b610204565b61011461025f565b6101aa61026b565b005b6101aa61028c565b6101146101c2366004610918565b610296565b60006101d46001836102bb565b92915050565b60006101e6600161033f565b905090565b60006101e6600161037f565b60606101d460018361044a565b60006102468383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506001939250506106119050565b6fffffffffffffffffffffffffffffffff169392505050565b60006101e660016106e8565b610275600161033f565b1561028a5761028460016106e8565b5061026b565b565b61028a6001610825565b60006102a360018361086a565b6fffffffffffffffffffffffffffffffff1692915050565b81546000906fffffffffffffffffffffffffffffffff165b835470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1681116103355760008181526001850160205260409020548314156103235760019150506101d4565b8061032d81610a19565b9150506102d3565b5060009392505050565b80546000906fffffffffffffffffffffffffffffffff7001000000000000000000000000000000008204811691166103778282610900565b949350505050565b60006103b482546fffffffffffffffffffffffffffffffff808216700100000000000000000000000000000000909204161090565b15610420576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f456d70747900000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b5080546fffffffffffffffffffffffffffffffff1660009081526001909101602052604090205490565b81546060906fffffffffffffffffffffffffffffffff700100000000000000000000000000000000820481169116836104838383610900565b10156104eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e73756666696369656e7400000000000000000000000000000000000000006044820152606401610417565b60008467ffffffffffffffff81111561050657610506610a52565b60405190808252806020026020018201604052801561052f578160200160208202803683370190505b50905060005b858110156105c8576fffffffffffffffffffffffffffffffff83166000908152600188016020526040902054825183908390811061057557610575610a81565b6020908102919091018101919091526fffffffffffffffffffffffffffffffff84166000908152600189019091526040812055826105b281610ab0565b93505080806105c090610a19565b915050610535565b5085547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff9290921691909117909455509192915050565b815470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1660005b82518110156106b457610650600183610ae0565b9150600083828151811061066657610666610a81565b602002602001015190506000801b81146106a1576fffffffffffffffffffffffffffffffff8316600090815260018601602052604090208190555b506106ad600182610b14565b905061063c565b5082546fffffffffffffffffffffffffffffffff808316700100000000000000000000000000000000029116179092555090565b80546000906fffffffffffffffffffffffffffffffff7001000000000000000000000000000000008204811691166107208282610900565b610786576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f456d7074790000000000000000000000000000000000000000000000000000006044820152606401610417565b6fffffffffffffffffffffffffffffffff81166000908152600185016020526040902054925082156107d7576fffffffffffffffffffffffffffffffff811660009081526001850160205260408120555b6107e2816001610ae0565b84547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff919091161790935550919050565b80546fffffffffffffffffffffffffffffffff166108675780547fffffffffffffffffffffffffffffffff000000000000000000000000000000001660011781555b50565b81546000906108a09070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff166001610ae0565b83546fffffffffffffffffffffffffffffffff808316700100000000000000000000000000000000029116178455905081156101d4576fffffffffffffffffffffffffffffffff8116600090815260019390930160205260409092205590565b60008161090e846001610ae0565b6102469190610b2c565b60006020828403121561092a57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156109695783518352928401929184019160010161094d565b50909695505050505050565b6000806020838503121561098857600080fd5b823567ffffffffffffffff808211156109a057600080fd5b818501915085601f8301126109b457600080fd5b8135818111156109c357600080fd5b8660208260051b85010111156109d857600080fd5b60209290920196919550909350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a4b57610a4b6109ea565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006fffffffffffffffffffffffffffffffff80831681811415610ad657610ad66109ea565b6001019392505050565b60006fffffffffffffffffffffffffffffffff808316818516808303821115610b0b57610b0b6109ea565b01949350505050565b60008219821115610b2757610b276109ea565b500190565b60006fffffffffffffffffffffffffffffffff83811690831681811015610b5557610b556109ea565b03939250505056fea26469706673582212204cd2d57f95df1ca2e4dd8dcd7397b2abd23ce08b3009ee1f0501dfa14a033c2364736f6c63430008090033";

export class TestQueue__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestQueue> {
    return super.deploy(overrides || {}) as Promise<TestQueue>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestQueue {
    return super.attach(address) as TestQueue;
  }
  connect(signer: Signer): TestQueue__factory {
    return super.connect(signer) as TestQueue__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestQueueInterface {
    return new utils.Interface(_abi) as TestQueueInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestQueue {
    return new Contract(address, _abi, signerOrProvider) as TestQueue;
  }
}
