/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  BadRecipientHandle,
  BadRecipientHandleInterface,
} from "../BadRecipientHandle";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "handle",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060a78061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063c122ad8d14602d575b600080fd5b603c6038366004603e565b5050565b005b60008060408385031215605057600080fd5b823563ffffffff81168114606357600080fd5b94602093909301359350505056fea26469706673582212205144316d43ca5d20a67a8df3b6544bc8a7316720a611d047844611029730a22364736f6c63430008090033";

export class BadRecipientHandle__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BadRecipientHandle> {
    return super.deploy(overrides || {}) as Promise<BadRecipientHandle>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BadRecipientHandle {
    return super.attach(address) as BadRecipientHandle;
  }
  connect(signer: Signer): BadRecipientHandle__factory {
    return super.connect(signer) as BadRecipientHandle__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BadRecipientHandleInterface {
    return new utils.Interface(_abi) as BadRecipientHandleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BadRecipientHandle {
    return new Contract(address, _abi, signerOrProvider) as BadRecipientHandle;
  }
}
