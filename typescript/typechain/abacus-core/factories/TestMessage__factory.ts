/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestMessage, TestMessageInterface } from "../TestMessage";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_message",
        type: "bytes",
      },
    ],
    name: "body",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_message",
        type: "bytes",
      },
    ],
    name: "destination",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_message",
        type: "bytes",
      },
    ],
    name: "leaf",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_message",
        type: "bytes",
      },
    ],
    name: "nonce",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_message",
        type: "bytes",
      },
    ],
    name: "origin",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_message",
        type: "bytes",
      },
    ],
    name: "recipient",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_message",
        type: "bytes",
      },
    ],
    name: "recipientAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_message",
        type: "bytes",
      },
    ],
    name: "sender",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061130f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063c97c703a1161005b578063c97c703a14610101578063cb3eb0e114610121578063d7a7a72c14610134578063f45387ba1461014757600080fd5b80634e7650041461008d5780636dc3c4f7146100ba578063985a5c31146100db578063c81aa9c8146100ee575b600080fd5b6100a061009b366004610ef3565b61017f565b60405163ffffffff90911681526020015b60405180910390f35b6100cd6100c8366004610ef3565b6101bb565b6040519081526020016100b1565b6100cd6100e9366004610ef3565b6101f1565b6100a06100fc366004610ef3565b610227565b61011461010f366004610ef3565b61025d565b6040516100b1919061103c565b6100a061012f366004610ef3565b6102be565b6100cd610142366004610ef3565b6102f4565b61015a610155366004610ef3565b61032a565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100b1565b60006101b561018e8383610360565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000016610384565b92915050565b60006101b56101ca8383610360565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000166103b5565b60006101b56102008383610360565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000166103e6565b60006101b56102368383610360565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000016610417565b60606101b5610297610270846000610360565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000016610448565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000016610497565b60006101b56102cd8383610360565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000166104f1565b60006101b56103038383610360565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000016610521565b60006101b56103398383610360565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000016610569565b81516000906020840161037b64ffffffffff8516828461057a565b95945050505050565b60006101b57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000008316602460046105dd565b60006101b57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000083166004602061060d565b60006101b57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000008316602c602061060d565b60006101b57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000008316602860046105dd565b60006101b5604c61046b81601886901c6bffffffffffffffffffffffff1661107e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000851691906000610810565b60606000806104b48460181c6bffffffffffffffffffffffff1690565b60405193508392506bffffffffffffffffffffffff1690506104e0846104db846020611095565b6108b1565b508181016020016040529052919050565b60006101b57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000083168260046105dd565b60006101b561052f836104f1565b610538846103b5565b61054185610384565b61054a86610417565b610553876103e6565b61056461055f89610448565b610497565b610aa7565b60006101b5610577836103e6565b90565b6000806105878484610aca565b9050604051811115610597575060005b806105c5577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000009150506105d6565b5050606083811b8317901b811760181b5b9392505050565b60006105ea8260206110ad565b6105f59060086110d0565b60ff1661060385858561060d565b901c949350505050565b600060ff821661061f575060006105d6565b6106378460181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff166106528460ff8516610aca565b11156106ed576106b16106738560781c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff166106998660181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16858560ff16610b42565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e4919061103c565b60405180910390fd5b60208260ff161115610781576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e20333220627974657300000000000060648201526084016106e4565b600061078e8360086110d0565b905060006107aa8660781c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16905060007f80000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84011d91909501511695945050505050565b60008061082b8660781c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16905061084486610bb0565b610858856108528489610aca565b90610aca565b1115610887577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000009150506108a9565b6108918186610aca565b90506108a58364ffffffffff16828661057a565b9150505b949350505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000008084161415610965576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201527f657220646572656600000000000000000000000000000000000000000000000060648201526084016106e4565b61096e83610c00565b6109fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201527f696e74657220646572656600000000000000000000000000000000000000000060648201526084016106e4565b6000610a148460181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff1690506000610a3e8560781c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff1690506000604051905084811115610a635760206060fd5b8285848460045afa50610a9d610a798760d81c90565b70ffffffffff000000000000000000000000606091821b168717901b841760181b90565b9695505050505050565b6000610ab7878787878787610c3e565b8051906020012090509695505050505050565b6000610ad68284611095565b9050828110156101b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4f766572666c6f7720647572696e67206164646974696f6e2e0000000000000060448201526064016106e4565b60606000610b4f86610c76565b9150506000610b5d86610c76565b9150506000610b6b86610c76565b9150506000610b7986610c76565b91505083838383604051602001610b9394939291906110f9565b604051602081830303815290604052945050505050949350505050565b6000610bca8260181c6bffffffffffffffffffffffff1690565b610be28360781c6bffffffffffffffffffffffff1690565b610bec9190611236565b6bffffffffffffffffffffffff1692915050565b6000610c0c8260d81c90565b64ffffffffff1664ffffffffff1415610c2757506000919050565b6000610c3283610bb0565b60405110199392505050565b6060868686868686604051602001610c5b96959493929190611266565b60405160208183030381529060405290509695505050505050565b600080601f5b600f8160ff161115610cd4576000610c958260086110d0565b60ff1685901c9050610ca681610d36565b61ffff16841793508160ff16601014610cc157601084901b93505b50610ccd6001826110ad565b9050610c7c565b50600f5b60ff8160ff161015610d30576000610cf18260086110d0565b60ff1685901c9050610d0281610d36565b61ffff16831792508160ff16600014610d1d57601083901b92505b50610d296001826110ad565b9050610cd8565b50915091565b6000610d4860048360ff16901c610d68565b60ff1661ffff919091161760081b610d5f82610d68565b60ff1617919050565b600060f08083179060ff82161415610d835750603092915050565b8060ff1660f11415610d985750603192915050565b8060ff1660f21415610dad5750603292915050565b8060ff1660f31415610dc25750603392915050565b8060ff1660f41415610dd75750603492915050565b8060ff1660f51415610dec5750603592915050565b8060ff1660f61415610e015750603692915050565b8060ff1660f71415610e165750603792915050565b8060ff1660f81415610e2b5750603892915050565b8060ff1660f91415610e405750603992915050565b8060ff1660fa1415610e555750606192915050565b8060ff1660fb1415610e6a5750606292915050565b8060ff1660fc1415610e7f5750606392915050565b8060ff1660fd1415610e945750606492915050565b8060ff1660fe1415610ea95750606592915050565b8060ff1660ff1415610ebe5750606692915050565b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060208284031215610f0557600080fd5b813567ffffffffffffffff80821115610f1d57600080fd5b818401915084601f830112610f3157600080fd5b813581811115610f4357610f43610ec4565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610f8957610f89610ec4565b81604052828152876020848701011115610fa257600080fd5b826020860160208301376000928101602001929092525095945050505050565b60005b83811015610fdd578181015183820152602001610fc5565b83811115610fec576000848401525b50505050565b6000815180845261100a816020860160208601610fc2565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006105d66020830184610ff2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156110905761109061104f565b500390565b600082198211156110a8576110a861104f565b500190565b600060ff821660ff8416808210156110c7576110c761104f565b90039392505050565b600060ff821660ff84168160ff04811182151516156110f1576110f161104f565b029392505050565b7f54797065644d656d566965772f696e646578202d204f76657272616e2074686581527f20766965772e20536c696365206973206174203078000000000000000000000060208201527fffffffffffff000000000000000000000000000000000000000000000000000060d086811b821660358401527f2077697468206c656e6774682030780000000000000000000000000000000000603b840181905286821b8316604a8501527f2e20417474656d7074656420746f20696e646578206174206f6666736574203060508501527f7800000000000000000000000000000000000000000000000000000000000000607085015285821b83166071850152607784015283901b1660868201527f2e00000000000000000000000000000000000000000000000000000000000000608c8201526000608d8201610a9d565b60006bffffffffffffffffffffffff80831681851680830382111561125d5761125d61104f565b01949350505050565b60007fffffffff00000000000000000000000000000000000000000000000000000000808960e01b168352876004840152808760e01b166024840152808660e01b1660288401525083602c83015282516112c781604c850160208701610fc2565b91909101604c0197965050505050505056fea26469706673582212209862fc917bfacb5cdc9ebfa38bc44e016ffc0a21e7171b6b397139134d785a5b64736f6c63430008090033";

export class TestMessage__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestMessage> {
    return super.deploy(overrides || {}) as Promise<TestMessage>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestMessage {
    return super.attach(address) as TestMessage;
  }
  connect(signer: Signer): TestMessage__factory {
    return super.connect(signer) as TestMessage__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestMessageInterface {
    return new utils.Interface(_abi) as TestMessageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestMessage {
    return new Contract(address, _abi, signerOrProvider) as TestMessage;
  }
}
