/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Version0, Version0Interface } from "../Version0";

const _abi = [
  {
    inputs: [],
    name: "VERSION",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060808061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063ffa1ad7414602d575b600080fd5b6034600081565b60405160ff909116815260200160405180910390f3fea264697066735822122031d5eb257a1c6e3190e5b4fea9b521d7ffe6709440aab1566f5f213381f26a7b64736f6c63430008090033";

export class Version0__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Version0> {
    return super.deploy(overrides || {}) as Promise<Version0>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Version0 {
    return super.attach(address) as Version0;
  }
  connect(signer: Signer): Version0__factory {
    return super.connect(signer) as Version0__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Version0Interface {
    return new utils.Interface(_abi) as Version0Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Version0 {
    return new Contract(address, _abi, signerOrProvider) as Version0;
  }
}
